## 3Laws Robot Diagnostic Module configuration

# Credentials
credentials:
  company_id: rover-robotics
  robot_id: "" # Your robot identifier
  influx_credentials:
    database_token: T5rCnb6CFYhkfHyMmEAX2pzB3YSSThrf9KewkbfhwsEm2ani8M1WjE_wA5Ec01VrIaElUmHRGG0Va-YDweE1xA==
  clickhouse_credentials:
    username: CLICKHOUSE_USR
    password: CLICKHOUSE_PWD

# Robot description - Definition of expected behavior of your system
robot_description:
  # robot_type and associated model_type options are (`*` not available yet):
  #   mobile_robot -> differential_drive, *omni_directional, *ackerman, bicycle
  #   legged_robot -> *bipedal, *quadruped
  #   land_vehicle -> *basic
  #   aerial_vehicle -> *fixed_wing, *helicopter, *multi_rotor
  #   surface_vehicle -> *sail_boat, *outboard_boat, *inboard_boat, *jet_boat
  #   underwater_vehicle -> *omni_directional
  #   spacecraft -> *omni_directional
  #   manipulator -> *fixed_base
  #   unclassified -> *unknown, *first_order
  robot_type: mobile_robot

  kinematic_model: # [optional] Geometry of the robot
    base_frame_id: robot # Name of the base frame of the robot
    geometry: # [variant] Geometry of the robot (see bottom of this file for more info)
      x_size: 0.5
      y_size: 0.4
      z_size: 0.3

  dynamical_model: # [optional] Behavior model of the robot
    model_type: bicycle
    state_domain: # Region of the state space in which the dynamical model has been validated
      # Defined as a a convex polytope S={x in Rn | lb <= M.x <= ub}
      ub:
        [1., 2., 3.] # If simple==true, must have same size as state of model_type,
        # otherwise must have size n_cstr
      lb:
        [-1., -2., -3.] # If simple==true, must have same size as state of model_type,
        # otherwise must have size n_cstr
      simple: false # [optional], If true, assumes M is an identity matrix (default: false)
      n_cstr: 3 # [optional if simple==true] Number of rows in M
      M: # [optional if simple==true] Either a single sequence representing the diagonal of M, or a sequence of the rows of M
        - [1., 0., 0., 0., 0.]
        - [0., 1., 0., 0., 0.]
        - [0., 0., 1., 0., 0.]
    input_domain: # Region of the input space accessible for control purposes and in which the dynamical model has been validated
      # Same representation as 'state_domain'
      ub:
        [1., 2.] # If simple==true, must have same size as input of model_type,
        # otherwise must have size n_cstr
      lb:
        [-1., -2.] # If simple==true, must have same size as input of model_type,
        # otherwise must have size n_cstr
      simple: true
    process_noise_covariance:
      [1., 1., 1., 1., 1.] # Either a single sequence representing the diagonal of the process noise covariance matrix,
      # or a sequence of its rows. Must have same size as state of model_type
    model_param: # [variant] Parameters for the chosen model_type (See bottom of this file for more info)
      wheel_dx: 1.
      origin_dx: 1.
      tau_vel: 1.
      tau_steer: 1.

  mission_manager: # [optional]
    extra_topics: ~ # [optional] (See bottom of this file for more info)
    process_name: ~ # [optional] (See bottom of this file for more info)
    finite_states: # Finite states of the robot
      - interface_id:
          /status # Name of the ros topic.
          # Supported types: [(default) std_msgs/String, std_msgs/FloatXX, std_msgs/Bool, std_msgs/Char, std_msgs/Byte, std_msgs/IntXX, std_msgs/UIntXX]
        sender_id: state_machine # Display name for sender of this state
        state_id: status # Identifier for this state, "<sender_id>.<state_id>" must form a UNIQUE identifier among all signals
        signal_min_rate: 1s
      - interface_id: /search_mode
        sender_id: state_machine
        state_id: search_mode
        signal_min_rate: 1s

  sensors: # [optional]
    extra_topics: ~ # [optional] (See bottom of this file for more info)
    process_name: ~ # [optional] (See bottom of this file for more info)
    batteries: [] # Coming soon!
    cameras: [] # Coming soon!
    gps: [] # Coming soon!
    imus: [] # Coming soon!
    laserscans: # Planar laser scanners
      - interface_id:
          /laserscan_1_topic # Name of the ros topic.
          # Supported types: [(default) sensor_msgs/LaserScan]
        sensor_id: laserscan_1 # Display name for this laserscan, must be UNIQUE among all laserscans
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
        noise_one_sigma: 0.025 # expected standard_error of the sensor (given by the manufacturer, often like: precision = +-2sigma)
        transform: # Specification of frame w.r.t which the measurement is expressed
          parent_frame_id: robot # Id of parent frame
          pose: # [optional] Pose w.r.t parent frame
            translation: [0., 0., 0.] # [optional] Translation w.r.t parent frame [x,y,z], default [0,0,0]
            rotation: [1., 0., 0., 0.] # [optional] Rotation quaternion w.r.t parent frame [w,x,y,z], default [1,0,0,0]
    lidars: [] # Coming soon!
    loadcells: # Force and torque measurement sensor, 6 axis by default
      - interface_id:
          /end_effector_wrench # Name of the ros topic.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
        sensor_id: end_effector_loadcell # Display name for this loadcell, must be UNIQUE among all loadcells
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
        transform: # Specification of frame w.r.t which the measurement is expressed
          parent_frame_id: robot # Id of parent frame
          pose: # [optional] Pose w.r.t parent frame
            translation: [0., 0., 0.] # [optional] Translation w.r.t parent frame [x,y,z], default [0,0,0]
            rotation: [1., 0., 0., 0.] # [optional] Rotation quaternion w.r.t parent frame [w,x,y,z], default [1,0,0,0]
        # axis_mask: # [optional] Define which of the 6 force/torque axes in SE3 the loadcell signals correspond to: [Fx, Fy, Fx, Mx, My, Mz].
        #   # If not specified or null, assumes all 6 axes.
        #   # Cannot be empty or longer than 6. Index must be between 0 and 5 included.
        #   [0, 5] # Corresponds to a 2 axis loadcell [Fx,Mz]
        noise_one_sigma: [1., 1., 1., 1., 1., 1.] # Noise characteristics of loadcell axes. Must have same size as axis_mask
        bounds: ~ # [optional] (See bottom of this file for more info)

  perception: ~ # [optional] Coming soon!

  localization: # [optional]
    extra_topics: ~ # [optional] (See bottom of this file for more info)
    process_name: ~ # [optional] (See bottom of this file for more info)
    state_estimation: # [optional]
      interface_id:
        /state # Name of the ros topic.
        # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
      signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
      state_size: 5 # Size of the state vector
      # mask:
      #   [0, 1, 2, 3, 5] # [optional] If only a subset of the vectorized message actually constitute the state vector
      #   # use this mask to extract the relevant data : state[i] = msg_vectorized[mask[i]].
      #   # Must be of size 'state_size', and not contain indices greater than the size of vectorized message.
      #   # If not specified or null, will be [0, ..., state_size-1]
      bounds: ~ # [optional] (See bottom of this file for more info)

    odometry:
      - interface_id:
          /odom_node_0_topic # Name of the ros topic.
          # Supported types: [(default) nav_msgs/Odometry]
        odom_id: odom_node_0 # Display name for this odometry source, must be UNIQUE among all odometry
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
        se2_only: true # [optional] Consider only SE2 projection of pose and twist (default: false)
        position_bounds: # [optional] Position part of the odometry. Components are [x,y,z] or [x,y] if se2_only==true (See bottom of this file for more info)
          norm_type: none
          norm_upper_bound: 1.
          norm_lower_bound: 0.
          upper_bounds: [1., 1.]
          lower_bounds: [-1., -1.]
          rates_upper_bounds: []
          rates_lower_bounds: []
        orientation_bounds: ~ # [optional] Same fields as position. Components are [roll,pitch,yaw] or [yaw] if se2_only==true (See bottom of this file for more info)
        velocity_linear_bounds: ~ # [optional] Same fields as position. Components are [vx,vy,vz] or [vz,vy] if se2_only==true (See bottom of this file for more info)
        velocity_angular_bounds: ~ # [optional] Same fields as position. Components are [wx,wy,wz] or [wz] if se2_only==true (See bottom of this file for more info)

  path_planning: # [optional]
    extra_topics: ~ # [optional] (See bottom of this file for more info)
    process_name: ~ # [optional] (See bottom of this file for more info)
    paths:
      - interface_id:
          /desired_path # Name of the ros topic.
          # Supported types: [(default) lll_msgs/Trajectory, nav_msgs/Path, trajectory_msgs/JointTrajectory]
        path_id: main_path # Display name for this path, must be UNIQUE among all paths
        trajectory_state_size: 7 # Size of the trajectory state vector
        signal_min_rate: 1min # Maximum time without receiving data before signal is considered timed out
        # state_mask:
        #   [0, 1, 2, 3, 4, 5, 6] # [optional] If the path only corresponds to a subset of the state_estimation vector,
        #   # use this mask to extract the relevant data : trajectory_state[i] = state_estimation[state_mask[i]].
        #   # Must be of size 'trajectory_state_size', and not contain indices greater than state_estimation.state_size.
        #   # If not specified or null, will be [0, ..., trajectory_state_size-1]
        tracking_error_bounds: ~ # [optional] Bounds on controller's tracking error : path_state - actual_state (See bottom of this file for more info)

  control: # [optional]
    extra_topics: ~ # [optional] (See bottom of this file for more info)
    process_name: ~ # [optional] (See bottom of this file for more info)
    setpoint_tacking_controllers: # PID like controllers
      - controller_id: velocity_controller # Display name for this controller, must be UNIQUE among all controllers
        state_size: 1 # Size of controller setpoint
        input_size: 1 # Size of control input computed by controller
        desired_state:
          interface_id: /controller_cmd_topic # Name of the desired state ros topic.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
          mask: [0] # [optional] If only a subset of desired_state_topic_id vector is actually used by controller,
          # use this mask to extract the relevant data : desired_state_used[i] = desired_state_received[desired_state_mask[i]]
          min_rate: 1s # Maximum time without receiving data before signal is considered timed out
          bounds: ~ # [optional] Bounds on desired state (See bottom of this file for more info)

        actual_state:
          interface_id: /controller_state_topic # Name of the actual state ros topic.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
          mask: ~ # [optional] Same as desired_state_mask
          min_rate: 1s # Maximum time without receiving data before signal is considered timed out
          bounds: ~ # [optional] Bounds on actual state (See bottom of this file for more info)

        control_input:
          interface_id: /controller_input_topic # Name of the control input ros topic.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
          mask: ~ # [optional] Same as desired_state_mask
          min_rate: 1s # Maximum time without receiving data before signal is considered timed out
          bounds: # [optional] Bounds on controller's control input (See bottom of this file for more info)
            norm_type: none
            norm_upper_bound: 1.
            norm_lower_bound: 0.
            upper_bounds: []
            lower_bounds: []
            rates_upper_bounds: [1.]
            rates_lower_bounds: [-1.]
        tracking_error_bounds: # [optional] Bounds on controller's tracking error : desired_state - actual_state (See bottom of this file for more info)
          norm_type: none
          norm_upper_bound: 1.
          norm_lower_bound: 0.
          upper_bounds: [1.]
          lower_bounds: [-1.]
          rates_upper_bounds: []
          rates_lower_bounds: []

    actuators: # Robot actuation
      combined: # Combined actuation vector
        interface_id:
          /control_input # Name of the ros topic publishing the complete robot actuation vector.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
        input_size: 3 # Size of the combined input vector
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
        bounds: ~ # [optional] (See bottom of this file for more info)
        # mask:
        #   [0,1,3] # [optional] If only a subset of the vectorized message actually constitute the combined input vector
        #   # use this mask to extract the relevant data : input[i] = msg_vectorized[mask[i]].
        #   # Must be of size 'input_size', and not contain indices greater than the size of the vectorized message.
        #   # If not specified or null, will be [0, ..., input_size-1]

    supervisors: # 3Laws AI Supervisors
      - interface_id: /main_supervisor_topic # Name of the supervisor data ros topic.
        supervisor_id: main_supervisor # Display name for this supervisor, must be UNIQUE among all supervisor
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out

  extras: # [optional]
    passthrough_metrics: # Generic passthrough for scalar metric signals
      - interface_id:
          /metric_1_topic # Name of the ros topic.
          # Supported types: [(default) std_msgs/Float64, std_msgs/Float32, std_msgs/Bool, std_msgs/Char, std_msgs/Byte, std_msgs/IntXX, std_msgs/UIntXX]
        metric_id: metric_1 # Display name for this metric, must be UNIQUE among all passthrough metrics
        metric_group_id:
          position # [optional] Group this signal belongs to.
          # Metrics of the same group are plotted on the same graph in 3laws.app

    clocks:
      - interface_id:
          /custom_clock # Name of the ros topic.
          # Supported types: [(default) rosgraph_msgs/Clock]
        clock_id: my_clock # Display name for this clock, must be UNIQUE among all clocks
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out

    signals: # Generic floating point multidimensional signal values sanity and bounds checking
      - interface_id:
          /test_signal_topic # Name of the ros topic.
          # Supported types: [(default) lll_msgs/Float64VectorStamped, any other vectorizable type (see bottom of this file)]
        sender_id: test_signal_node # Display name of sender node
        signal_id: test_signal # Display name of this signal, "<sender_id>.<signal_id>" must form a UNIQUE identifier among all signals
        signal_size: 1 # Size of this signal
        signal_min_rate: 1s # Maximum time without receiving data before signal is considered timed out
        # mask:
        #   [2] # [optional] If only a subset of vectorized message actually constitute the signal vector
        #   # use this mask to extract the relevant data : signal[i] = msg_vectorized[mask[i]].
        #   # Must be of size 'signal_size', and not contain indices greater than the size of the vectorized message.
        #   # If not specified or null, will be [0, ..., signal_size-1]
        bounds: ~ # [optional] (See bottom of this file for more info)

    nodes: # Generic node health checking metric
      - node_id: test_node # Display name of node, must be UNIQUE among all nodes
        # text_log_interface_id:
        #   /test_node_log # [optional] Name of the ros topic publishing log info for that node.
        #   # Supported types: [(default) rcl_interfaces/Log]
        # process_name: # [optional] (See bottom of this file for more info)
        #   test_node_exec.
        topics: # List of topics published by the node (only available in ros2 humble and up)
          - interface_id:
              /test_node_topic_1 # Name of the ros topic. Associated 'interface.message_type_map.<interface_id>' must be specified.
              # Supported types: [builtin_interfaces/*, geometry_msgs/*, lll_msgs/*, nav_msgs/*, rcl_interfaces/*, rosgraph_msgs/*, sensor_msgs/*, std_msgs/*, trajectory_msgs/*, visualization_msgs/*]
            topic_id: test_node_topic_1 # Display name for this topic, must be UNIQUE among all topics of each node
            signal_min_rate: 1s # Maximum allowed duration without receiving data
      - node_id: rosout
        text_log_interface_id: /rosout # If equal to '/rosout', uses 'name' field of incoming rcl_interfaces/Log message as node_id for text_log message
        topics: []

# Diagnostic config - Configuration for behavior of diagnostic module
diagnostic_config:
  timeout_factor: 2 # Multiplication factor on signal_min_rate to consider signal has timeout
  max_signals_delay: 10ms # Maximum allowed delay between message being sent and received
  incident_detection: # This configuration will define how incident are flagged and with which severity (ok,minor,severe,critical).
    # If the field ends with severity it means that this incident is a either true or false and will be flagged if the field is not null
    # If a field is an array it means that there is a continuous value that is monitored and the incidents is flagged only if a threshold is outrun
    # The severity comes from the position of the threshold in the array, so index zero is a critical event, index one is severe, and so on.
    # To not flag a event, just put a null value to the corresponding field (~) or an empty array ([]).
    # The min displayed severity is a way to not change all the config if events with a certain level of criticity need to be flagged,
    # but some less critical event are configured.
    min_event_time: 1s # Minimum incident duration that will be sent to the dashboard
    min_displayed_severity: minor # Minimum incident severity level that will be sent to the dashboard (ok,minor,severe,critical)
    collision:
      limit_dists: [] # Threshold values in meter that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
    computer:
      limit_cpu_loads: [] # Threshold values in percentage (0-100) that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
      limit_disk_usages: [] # Threshold values in percentage (0-100) that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
      limit_ram_usages: [] # Threshold values in percentage (0-100) that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
    clock:
      limit_utc_deviations: [] # Threshold values as string (100ns, 1s, 1min) that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
      limit_rtc_deviations: [] # Threshold values as string (100ns, 1s, 1min) that will trigger critical, severe, minor severity incident. Maximum length = 4, keep empty if you don't want to search for this event
    node_health:
      timeout_severity: severe # Severity of an event of this type
      not_ok_severity: minor
      limit_delay_bounds: [1., 0.9, 0.5]
      limit_rate_bounds: [1., 0.9, 0.5]
    obstruction:
      obstruction_severity: ~ # Keep as null if you don't want to search for this type of event
    signal_health:
      nan_severity: ~
      zero_severity: ~
      subnormal_severity: ~
      inf_severity: ~
      bad_timestamp_severity: severe
      limit_bounds: [0.1]
    dynamic:
      limit_xdot_difference: [0.5, 0.2]
      input_domain_severity: severe
      state_domain_severity: severe
    tracking:
      limit_tracking_difference: [6.]
  upload: # [optional] Data upload options
    high_frequency: # High frequency data upload
      state: true # System state signal
      input: true # System input signal
      path_tracking_error: false # Path tracking signal
      control_tracking_error: false # Control Tracking signal

interface:
  retimestamp: never # Re-timestamp incoming messages at time of reception. Options: [never, if_zero, always]
  project_to_se2: true # During vectorization, project all SE3 messages to SE2, like nav_msgs/Odometry -> [x,y,theta,vx,vy,wz]

  # Map from interface_id to info for that topic
  ros_topics_info:
    /test_signal_topic:
      type: lll_msgs/Float64VectorStamped # [optional] Format must be package_name/MessageType, case is important!
      qos: SystemDefaultsQoS # [optional] For ROS2 only. Possible values [SystemDefaultsQoS, ClockQoS(ros2 humble and up), SensorDataQoS, ParametersQoS, ServicesQoS, ParameterEventsQoS, RosoutQoS(ros2 humble and up)]
      # queue_length: 1000 # [optional] For ROS1 only.
    /rosout:
      qos: RosoutQoS
    /test_node_topic_1:
      type: geometry_msgs/TransformStamped
    /test_node_topic_2:
      type: geometry_msgs/PoseStamped
###
### More info:

## Vectorizable messages types
# lll_msgs::msg::Float64VectorStamped -> same as msg
# geometry_msgs/Accel[Stamped], project_to_se2 ? 3-[a_lin_x,a_lin_y,a_ang_z] : 6-[a_lin_x,a_lin_y,a_lin_z,a_ang_x,a_ang_y,a_ang_z]
# geometry_msgs/Point[32], project_to_se2 ? 2-[x,y] : 3-[x,y,z]
# geometry_msgs/Pose2D, 3-[x,y,theta]
# geometry_msgs/Pose[Stamped], project_to_se2 ? 3-[x,y,theta] : 7-[x,y,z,qw,qx,qy,qz] with theta = atan2(2(qw*qz-qx*qy),1-2(qy*qy+qz*qz))
# geometry_msgs/Twist[Stamped], project_to_se2 ? 3-[lin_x,lin_y,ang_z] : 6-[lin_x,lin_y,lin_z,ang_x,ang_y,ang_z]
# geometry_msgs/Vector3[Stamped], project_to_se2 ? 2-[x,y] : 3-[x,y,z]
# geometry_msgs/Wrench[Stamped], project_to_se2 ? 3-[Fx,Fy,Mz] : 6-[Fx,Fy,Fz,Mx,My,Mz]
# sensor_msgs/JointState, (N+M)-[position[0],...,position[N],velocity[0],...,velocity[M]]
# sensor_msgs/MultiDofJointState, project_to_se2 ? 3(N+M)-[x[0],y[0],theta[0],...,x[N],y[N],theta[N]|vx[0],vy[0],wz[0],...,vx[M],vy[M],wz[M]]
#                                                : (7N+6M)-[x[0],y[0],z[0],qw[0],qx[0],qy[0],qz[0],...,x[N],y[N],z[N],qw[N],qx[N],qy[N],qz[N]|vx[0],vy[0],vz[0],wx[0],wy[0],wz[0],...,vx[M],vy[M],vz[M],wx[M],wy[M],wz[M]]
#                                                 with theta = atan2(2(qw*qz-qx*qy),1-2(qy*qy+qz*qz))
# nav_msgs/Odometry, project_to_se2 ? 6-[x,y,theta,vx,vy,wz] : 13-[x,y,z,qw,qx,qy,qz,vx,vy,vz,wx,wy,wz] with theta = atan2(2(qw*qz-qx*qy),1-2(qy*qy+qz*qz))
# nav_msgs/Float32[MultiArray] -> same as msg
# nav_msgs/Float64[MultiArray] -> same as msg

## Bounds
# All bounds parameters are similar:
#
# norm_type: Norm to use for norm bound, possible values (none, L_1, L_2, L_infinity)
# norm_upper_bound: # Upper norm bound, floating point
# norm_lower_bound: # Lower norm bound, floating point
# upper_bounds:  # Upper bounds on the value of the components of the tracking_error, sequence of floating point
# lower_bounds: # Lower bounds on the value of the components of the tracking_error, sequence of floating point
# rates_upper_bounds: # Upper bounds on the value of the components of the tracking_error, sequence of floating point
# rates_lower_bounds:  # Lower bounds on the value of the components of the tracking_error, sequence of floating point
#
# Set both (rate_)upper_bounds[i] and (rates_)lower_bounds[i] to .inf to disable bound on component i.
# Leave empty to deactivate all (rate) bounds checking.
# Both (rate_)upper_bounds and (rates_)lower_bounds must have same size

## Duration parameters
# Parameters like signal_min_rate represent durations.
# They can be specified by an integer number corresponding to a number of nanoseconds:
# signal_min_rate: 1 -> 1 nanoseconds
# signal_min_rate: 1000000000 -> 1 second
# They can also be specified by an integer of floating point followed by the time scale:
# signal_min_rate: 1ns -> 1 nanoseconds
# signal_min_rate: 25us -> 25 microseconds
# signal_min_rate: 0.5ms -> 500 milliseconds
# signal_min_rate: 1s -> 1 second
# signal_min_rate: 20hz -> 50 milliseconds
# signal_min_rate: 1min -> 1 minute
# signal_min_rate: 1h -> 1 hour
# signal_min_rate: 1d -> 1 day
# signal_min_rate: 1y -> 1 year

## Kinematic model
# The kinematic model of the robot defines its geometry. We currently support the following geometries:
#
# *** Point **
# geometry: ~
#
# *** Sphere **
# geometry:
#   radius: 1. # Radius of the sphere
#   pose: # [optional] Pose of sphere w.r.t base frame
#     translation: [0., 0., 0.] # [optional] Translation w.r.t base frame [x,y,z], default [0,0,0]
#     rotation: [1., 0., 0., 0.] # [optional] Rotation quaternion w.r.t base frame [w,x,y,z], default [1,0,0,0]
#
# *** Cylinder **
# geometry:
#   radius: 1. # Radius of the cylinder
#   length: 1. # Length of the cylinder
#   pose: # [optional] Pose of cylinder w.r.t base frame
#     translation: [0., 0., 0.] # [optional] Translation w.r.t base frame [x,y,z], default [0,0,0]
#     rotation: [1., 0., 0., 0.] # [optional] Rotation quaternion w.r.t base frame [w,x,y,z], default [1,0,0,0]
#
# *** Bounding Box **
# geometry:
#   x_size: 1. # Total length of the box along x axis
#   y_size: 1. # Total length of the box along y axis
#   z_size: 1. # Total length of the box along z axis
#   pose: # [optional] Pose of box w.r.t base frame
#     translation: [0., 0., 0.] # [optional] Translation w.r.t base frame [x,y,z], default [0,0,0]
#     rotation: [1., 0., 0., 0.] # [optional] Rotation quaternion w.r.t base frame [w,x,y,z], default [1,0,0,0]

## Dynamical model
# Each dynamical model type has its own set of states, inputs, and parameters:
# mobile_robot:
#   |differential_drive| - Dynamical model for a rigid body over SE2 with first order tracking
#   response of longitudinal and rotational body velocities
#     states: [x,y,yaw,vx_body_actual,wz_body_actual]
#     inputs: [vx_body_command,wz_body_command]
#     parameters:
#     - tau_vel -> time constant of the 1st order tracking response in linear velocity (1/s) (must be strictly positive)
#     - tau_yaw_vel -> time constant of the 1st order tracking response in angular velocity (1/s) (must be strictly positive)
#   |omni_directional| - not available yet
#   |ackerman| - not available yet
#   |bicycle| - Dynamical model for a 2 wheels or 4 wheel but with coupled front wheel steering vehicle
#   over SE2, with first order tracking response of steering angle and origin velocity magnitude.
#     states: [x,y,yaw,||v_body||_actual,steering_angle_actual]
#     inputs: [||v_body||_command,steering_angle_command]
#     parameters:
#     - wheel_dx -> Distance between front and back wheels (m) (must be strictly positive)
#     - origin_dx -> Position of vehicle's origin w.r.t back wheels (m) (must be positive)
#     - tau_vel -> time constant of the 1st order tracking response in linear velocity (1/s) (must be strictly positive)
#     - tau_steer -> time constant of the 1st order tracking response in angular velocity (1/s) (must be strictly positive)
# legged_robot:
#   |bipedal| - not available yet
#   |quadruped| - not available yet
# land_vehicle:
#   |basic| - not available yet
# aerial_vehicle:
#   |fixed_wing| - not available yet
#   |helicopter| - not available yet
#   |multi_rotor| - not available yet
# surface_vehicle:
#   |sail_boat| - not available yet
#   |outboard_boat| - not available yet
#   |inboard_boat| - not available yet
#   |jet_boat| - not available yet
# underwater_vehicle:
#   |omni_directional| - not available yet
# spacecraft:
#   |omni_directional| - not available yet
# manipulator:
#   |fixed_base| - not available yet
# unclassified:
#   |unknown| - not available yet
#   |first_order| - not available yet

## Nodes
# Each of the robot domains is associated to a node: mission_manager, sensors, localization, planning, and control.
# For each of these nodes, it is possible to specify additional topics that will factor in the health of the node through the extra_topics field:
# extra_topics:
#   - interface_id:
#       /path_planning_node_extra_topic_1 # Name of the ros topic. Associated 'interface.message_type_map.<interface_id>' must be specified.
#       # Supported types: [builtin_interfaces/*, geometry_msgs/*, lll_msgs/*, nav_msgs/*, rcl_interfaces/*, rosgraph_msgs/*, sensor_msgs/*, std_msgs/*, trajectory_msgs/*, visualization_msgs/*]
#     topic_id: extra_topic_1 # Display name for this topic
#     signal_min_rate: 1s # Maximum allowed duration without receiving data
# For each node, it is also possible to specify its associated process_name. If the process_name string is only composed of numbers, it will be interpreted as the PID directly.
# Otherwise, the PID will be searched for. In order to find the PID of the process, the process_name string will be matched to the content of the /proc/<PID>/cmdline files.
# It is a partial match, i.e it checks if /proc/<PID>/cmdline contains the process_name string. If zero or multiple match are found, an error will be raised.
